package com.in2horizon.escore.controller.superuser;

import com.in2horizon.escore.model.AuthorityRepository;
import com.in2horizon.escore.model.RoleAssocRepository;
import com.in2horizon.escore.model.User;
import com.in2horizon.escore.model.UserRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;
import java.util.Random;

@Slf4j
@RestController
@CrossOrigin(value = "http://localhost:4200")
public class SuperUserController {

    @Autowired
    RoleAssocRepository roleRepo;
    @Autowired
    UserRepository userRepo;
    @Autowired
    AuthorityRepository authRepo;
    @Autowired
    PasswordEncoder encoder;

    //Logger logger = LoggerFactory.getLogger(SuperController.class);

    @GetMapping("/users")
    public Iterable<User> getUsers() {
        Iterable<User> users = userRepo.findAll();
        log.info("loaded users: " + users.toString());
        return users;
    }

    @GetMapping("/users/{id}")
    public ResponseEntity<User> getUser(@PathVariable("id") Long id) {
        Optional<User> user = userRepo.findById(id);

        if (user.isPresent()) {
            return ResponseEntity.ok(user.get());
        } else {
            return ResponseEntity.notFound().build();
        }
    }


    @PostMapping(value = "/users",produces = "application/json")
    public ResponseEntity<String> addUser(@RequestBody User user) {
        User existing = userRepo.findById(user.getId()).orElse(null);
        if (existing == null) {
            if (user.getUsername().isEmpty()
                    || user.getPassword().isEmpty()
                    || user.getEmail().isEmpty()) {
                return new ResponseEntity<String>("Please fill all required fields",HttpStatus.BAD_REQUEST);
            }
            log.info(userRepo.save(user).toString());
            return ResponseEntity.ok("User added");
        }
        return new ResponseEntity<String>("User already exists",HttpStatus.CONFLICT);
    }

    @PutMapping("/users")
    public ResponseEntity<String> updateUser(@RequestBody User user) {
        User existingUser = userRepo.findById(user.getId()).orElse(null);
        if (existingUser != null) {

            existingUser.setUsername(user.getUsername());
               existingUser.setPassword(user.getPassword());
            existingUser.setEmail(user.getEmail());
            //   existingUser.setAuthorities(user.getAuthorities());

            userRepo.save(existingUser);
            return ResponseEntity.ok("user updated");
        }
        return new ResponseEntity<>("User not found", HttpStatus.NOT_FOUND);


    }

    @DeleteMapping(value = "/users/{id}")
    public ResponseEntity deleteUser(@PathVariable Long id) {

        Optional<User> user = userRepo.findById(id);
        if (user.isPresent()) {
            if (roleRepo.findAllByUser(user.get()).isEmpty()) {
                userRepo.deleteById(id);
                return new ResponseEntity(HttpStatus.OK);

            } else {
                return new ResponseEntity(HttpStatus.PARTIAL_CONTENT);
            }
        } else {
            return new ResponseEntity(HttpStatus.NOT_FOUND);
        }

    }






/*

    @PatchMapping("/competitions/{competitionId}")
    ResponseEntity<Competition> patchCompetition(@PathVariable Long competitionId, @RequestBody Map<String, Object> fields) {
        log.info("tererereerer"+ fields);


        if (competitionId <= 0 || fields == null || fields.isEmpty() || !fields.get("id").equals(competitionId)){
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
        Competition comp = (compRepo.findById(competitionId)).get();

        if( comp == null){
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }


        fields.forEach((k, v) -> {
            // use reflection to get field k on object and set it to value v

            Field field = ReflectionUtils.findField(Competition.class, k); // find field in the object class
            field.setAccessible(true);
            ReflectionUtils.setField(field, comp, v); // set given field for defined object to value V
        });

        compRepo.save(comp);
        return new ResponseEntity<>(comp, HttpStatus.OK);
    }
*/


    private String generatePassword(int range) {
        Random random = new Random();
        String password = Integer.toString(random.nextInt(range));
        return password;
    }


}






















